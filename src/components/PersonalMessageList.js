import React, { useState, useEffect } from 'react';
import { apiGet, apiPost, apiPut } from '../utils/api';
import { useAuth } from './contexts/AuthContext';

const PersonalMessageList = () => {
    const { user } = useAuth();
    const [conversations, setConversations] = useState([]);
    const [selectedConversation, setSelectedConversation] = useState(null);
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState('');
    const [loading, setLoading] = useState(false);
    const [unreadCount, setUnreadCount] = useState(0);

    // ‰ºöË©±‰∏ÄË¶ß„ÇíÂèñÂæó
    const fetchConversations = async () => {
        try {
            setLoading(true);
            const response = await apiGet('/messages/conversations');
            if (response.success) {
                setConversations(response.data);
            }
        } catch (error) {
            console.error('‰ºöË©±‰∏ÄË¶ßÂèñÂæó„Ç®„É©„Éº:', error);
        } finally {
            setLoading(false);
        }
    };

    // Êú™Ë™≠„É°„ÉÉ„Çª„Éº„Ç∏Êï∞„ÇíÂèñÂæó
    const fetchUnreadCount = async () => {
        try {
            const response = await apiGet('/messages/unread-count');
            if (response.success) {
                setUnreadCount(response.data.unread_count);
            }
        } catch (error) {
            console.error('Êú™Ë™≠„É°„ÉÉ„Çª„Éº„Ç∏Êï∞ÂèñÂæó„Ç®„É©„Éº:', error);
        }
    };

    // ÁâπÂÆö„É¶„Éº„Ç∂„Éº„Å®„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏Â±•Ê≠¥„ÇíÂèñÂæó
    const fetchMessages = async (otherUserId) => {
        try {
            setLoading(true);
            const response = await apiGet(`/messages/conversation/${otherUserId}`);
            if (response.success) {
                setMessages(response.data);
            }
        } catch (error) {
            console.error('„É°„ÉÉ„Çª„Éº„Ç∏Â±•Ê≠¥ÂèñÂæó„Ç®„É©„Éº:', error);
        } finally {
            setLoading(false);
        }
    };

    // „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
    const sendMessage = async (e) => {
        e.preventDefault();
        if (!newMessage.trim() || !selectedConversation) return;

        try {
            const response = await apiPost('/messages/send', {
                receiver_id: selectedConversation.other_user_id,
                message: newMessage.trim()
            });

            if (response.success) {
                setNewMessage('');
                // „É°„ÉÉ„Çª„Éº„Ç∏Â±•Ê≠¥„ÇíÂÜçÂèñÂæó
                fetchMessages(selectedConversation.other_user_id);
                // ‰ºöË©±‰∏ÄË¶ß„ÇíÊõ¥Êñ∞
                fetchConversations();
                // Êú™Ë™≠Êï∞„ÇíÊõ¥Êñ∞
                fetchUnreadCount();
            }
        } catch (error) {
            console.error('„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„Ç®„É©„Éº:', error);
        }
    };

    // ‰ºöË©±„ÇíÈÅ∏Êäû
    const selectConversation = (conversation) => {
        setSelectedConversation(conversation);
        fetchMessages(conversation.other_user_id);
    };

    useEffect(() => {
        fetchConversations();
        fetchUnreadCount();
    }, []);

    // Êó•ÊôÇ„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    const formatDateTime = (dateString) => {
        const date = new Date(dateString);
        return date.toLocaleString('ja-JP', {
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    // Êó•ÊôÇ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºàË©≥Á¥∞Ôºâ
    const formatDateTimeDetail = (dateString) => {
        const date = new Date(dateString);
        return date.toLocaleString('ja-JP', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    return (
        <div className="space-y-4">
            {unreadCount > 0 && (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                    <span className="text-blue-800 text-sm">
                        üì¨ Êú™Ë™≠„É°„ÉÉ„Çª„Éº„Ç∏ {unreadCount}‰ª∂
                    </span>
                </div>
            )}

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
                {/* ‰ºöË©±‰∏ÄË¶ß */}
                <div className="lg:col-span-1">
                    <div className="bg-gray-50 rounded-lg p-4">
                        <h3 className="font-semibold text-gray-800 mb-3">‰ºöË©±‰∏ÄË¶ß</h3>
                        <div className="max-h-64 overflow-y-auto space-y-2">
                            {loading ? (
                                <div className="text-center text-gray-500 text-sm">Ë™≠„ÅøËæº„Åø‰∏≠...</div>
                            ) : conversations.length === 0 ? (
                                <div className="text-center text-gray-500 text-sm">
                                    „É°„ÉÉ„Çª„Éº„Ç∏„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì
                                </div>
                            ) : (
                                conversations.map(conversation => (
                                    <div
                                        key={conversation.other_user_id}
                                        className={`p-3 rounded-lg cursor-pointer transition-colors ${
                                            selectedConversation?.other_user_id === conversation.other_user_id
                                                ? 'bg-blue-100 border border-blue-300'
                                                : 'bg-white hover:bg-gray-100'
                                        }`}
                                        onClick={() => selectConversation(conversation)}
                                    >
                                        <div className="flex justify-between items-start">
                                            <div className="flex-1">
                                                <p className="font-medium text-sm text-gray-800">
                                                    {conversation.other_user_name}
                                                </p>
                                                <p className="text-xs text-gray-500">
                                                    {conversation.other_user_role === 4 ? 'ÊåáÂ∞éÂì°' : 'Âà©Áî®ËÄÖ'}
                                                </p>
                                                <p className="text-xs text-gray-400">
                                                    {formatDateTime(conversation.last_message_at)}
                                                </p>
                                            </div>
                                            {conversation.unread_count > 0 && (
                                                <span className="bg-red-500 text-white text-xs px-2 py-1 rounded-full">
                                                    {conversation.unread_count}
                                                </span>
                                            )}
                                        </div>
                                    </div>
                                ))
                            )}
                        </div>
                    </div>
                </div>

                {/* „É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫„Ç®„É™„Ç¢ */}
                <div className="lg:col-span-2">
                    {selectedConversation ? (
                        <div className="bg-gray-50 rounded-lg h-80 flex flex-col">
                            {/* „Éò„ÉÉ„ÉÄ„Éº */}
                            <div className="p-3 border-b bg-white rounded-t-lg">
                                <h4 className="font-semibold text-gray-800">
                                    {selectedConversation.other_user_name}
                                    <span className="text-sm text-gray-500 ml-2">
                                        ({selectedConversation.other_user_role === 4 ? 'ÊåáÂ∞éÂì°' : 'Âà©Áî®ËÄÖ'})
                                    </span>
                                </h4>
                            </div>

                            {/* „É°„ÉÉ„Çª„Éº„Ç∏‰∏ÄË¶ß */}
                            <div className="flex-1 overflow-y-auto p-3 space-y-3">
                                {loading ? (
                                    <div className="text-center text-gray-500 text-sm">Ë™≠„ÅøËæº„Åø‰∏≠...</div>
                                ) : messages.length === 0 ? (
                                    <div className="text-center text-gray-500 text-sm">
                                        „É°„ÉÉ„Çª„Éº„Ç∏„Åå„ÅÇ„Çä„Åæ„Åõ„Çì
                                    </div>
                                ) : (
                                    messages.map(message => (
                                        <div
                                            key={message.id}
                                            className={`flex ${
                                                message.sender_id === user.id ? 'justify-end' : 'justify-start'
                                            }`}
                                        >
                                            <div
                                                className={`max-w-xs px-3 py-2 rounded-lg text-sm ${
                                                    message.sender_id === user.id
                                                        ? 'bg-blue-500 text-white'
                                                        : 'bg-white text-gray-800 border'
                                                }`}
                                            >
                                                <p>{message.message}</p>
                                                <p
                                                    className={`text-xs mt-1 ${
                                                        message.sender_id === user.id
                                                            ? 'text-blue-100'
                                                            : 'text-gray-500'
                                                    }`}
                                                >
                                                    {formatDateTimeDetail(message.created_at)}
                                                </p>
                                            </div>
                                        </div>
                                    ))
                                )}
                            </div>

                            {/* „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„Éï„Ç©„Éº„É† */}
                            <form onSubmit={sendMessage} className="p-3 border-t bg-white rounded-b-lg">
                                <div className="flex space-x-2">
                                    <input
                                        type="text"
                                        value={newMessage}
                                        onChange={(e) => setNewMessage(e.target.value)}
                                        placeholder="„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ..."
                                        className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                                    />
                                    <button
                                        type="submit"
                                        disabled={!newMessage.trim()}
                                        className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed text-sm"
                                    >
                                        ÈÄÅ‰ø°
                                    </button>
                                </div>
                            </form>
                        </div>
                    ) : (
                        <div className="bg-gray-50 rounded-lg h-80 flex items-center justify-center">
                            <div className="text-center text-gray-500">
                                <p className="text-sm">‰ºöË©±„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default PersonalMessageList;
